*learnviml.txt*  A Suggested Path for Learning VimL

This help file teaches the VimL scripting language using a progressive
set of reading assignments and followup hands-on exercises. It is aimed
primarily at existing programmers, however beginners can do the external
tutorials referenced below.

LearnVimL~

* is written -in- Vim help format, internal to Vim itself
* has comprehensive coverage of VimL, from basics to the gritty stuff with
  maps, :redir, plugins, etc.
* relies heavily on the existing Vim documentation with assessment questions,
  exercises and challenges to reinforce learning
* comes with a searchable set of sample code snippets covering the builtin
  functions and idiomatic VimL
* authored by a group of experienced VimL coders, each sharing their individual
  skills, tips and tricks to rapidly steer you toward VimL excellence.

This file is structured with the following conventions:

CHAPTER HEADINGS are all caps and preceded by a line of # characters.
SECTIONS within a Chapter are all caps and preceded by a line of = characters.
1. Topics within a Section are numbered, in Title Case.
Exercises are blocked in lines of - characters.

##############################################################################
LEARNVIML TABLE OF CONTENTS                                *learnviml-toc*

|learnviml-Introduction|
|learnviml-Searchable-Samples|
|learnviml-Syntax|
|learnviml-Builtin-Functions|
|learnviml-Exceptions|
|learnviml-Plugins|
|learnviml-OOP|
|learnviml-Functional(-ish)|
|learnviml-Challenges|

##############################################################################
INTRODUCTION                                      *learnviml-Introduction*

What is VimL? In simple terms, it's Vim's scripting language, but the full
answer is a little more complicated than that. It's actually more than one
language; it's a procedural expression language (with prototypal OOP
extensions) wrapped around a declarative command language (called Ex). It has
builtin regular expressions making text manipulation easier, a comprehensive
library of builtin functions for manipulating strings, floats, lists and
dictionaries as well as Vim editor objects like buffers, windows, tabs and the
myriad auxiliary entities surrounding them. It supports procedural,
functional(-ish) and object-oriented approaches to software development. It may
not be the prettiest language in the world, but it definitely gets the job
done.

I intend here to walk you through the most important parts of the Vim Reference
Manual and User Guide pertaining to VimL. If you would rather read the essence
from start to end on your own, then:

* The builtin reference manual for VimL is |usr_41.txt|
* The expression language is covered in |eval.txt|

If you would like a more colourful, friendly and gentler introduction to the
wonderful world of VimL coding then see:

* Damian Conway's Beginner's Guide to VimL:
  http://www.ibm.com/developerworks/linux/library/l-vim-script-1/index.html

* Steve Losh's Learn VimL the Hard Way:
  http://learnvimscriptthehardway.stevelosh.com/

If you're still with me, let's dive in:

##############################################################################
SEARCHABLE SAMPLES                          *learnviml-Searchable-Samples*
                                            *:LVL* *LVL*

When one of the authors first learnt to program it was with the wonderful
Borland Turbo C compiler. One of the best things about Turbo C was that it
came with extensive documentation for the standard C libraries. Each function
had a complete standalone snippet showing its usage.

In an attempt to emulate that excellence, LearnVimL comes with a builtin
command, :LVL <term> which searches the bundled samples for the given term,
displaying a title-list of matches. These matches are shown in the
|location-list|, so presisng <enter> on a list item will open up the
associated snippet in an editable buffer of its own. From there you can
|:source| the code to see it run and play with it for better understanding.

##############################################################################
SYNTAX                                                  *learnviml-Syntax*

Before Vim, there was vi and it didn't have VimL as we know it today; it only
had Ex. VimL extends Ex with a procedural expression language which provides
looping constructs, conditional expressions and a rich expression language
with versatile data structures like lists (dynamic arrays) and dictionaries
(associative arrays, aka hashes/maps).

Before we jump into all that goodness, though, we ought to look at bare Ex
commands and the way they are invoked from within Vim.

Read the following parts of |cmdline.txt|
3. Ex command-lines         |cmdline-lines|
4. Ex command-line ranges   |cmdline-ranges|
6. Ex special characters    |cmdline-special|

Throughout this tutorial we will follow up the reading sections with little
quizzes to make sure you're staying awake and keeping up.

--------------------------------------------------------------------------
Exercise Set 1: The Ex Language

1.0 What is the Ex language and what is it used for in Vim?

1.1 How does it relate to VimL?

2.0 How do you comment out an Ex line?

2.1 How do you feel about this? Can you imagine any conflicts
    this might cause?

2.2 Which commands can't take a trailing comment? Why?

3.0 The ';' is used in shell and C to separate commands. How do
    you separate commands in Ex?

3.1 How do you escape the Ex command separator?

3.2 Which commands cannot use this command separator? Why?

3.3 How do you overcome this limitation?

3.4 The developer wanted to replace all apples with bananas and
    all cherries with durians, but his approach was broken. Why?
    Fix it:  (two acceptable solutions)

  :%s/apple/banana/|s/cherry/durian/

3.5 External commands (using the shell) consume the standard Ex
    command separator. What is the solution to this problem?

4.0 What meanings do '%' and '#' have on the Ex command line? When?

4.1 Explain the difference between these two commands:

  :w! name
  :w !name

5.0 Explain the difference between using ',' and ';' in command-line
    ranges.

5.1 What do the following special ranges evaluate to?

  .
  $
  %

5.2 What is the command for the range from the line after the next
    occurrence of '^Chapter' and 5 lines before a subsequent '^Example'?

6.0 How do you insert the name of the current buffer into a command-line
    command? There are two solutions.

6.1 Using the |expand()| function, |:echo| the full path name of the
    current buffer.

6.2 What is the difference between <cword> and <cWORD>?

6.3 How do you pull the current <cword> up into the command-line?
--------------------------------------------------------------------------

While it is assumed that you know how to set and test options in Vim, there
are several enhanced ways to play with options that you should brush up on.

Read the following parts of |options.txt|
1. Setting options          |set-option|

In terms of writing VimL, there are around a dozen important options that
influence how your scripts run and how happy you will be writing them.

2. Read the following specific options:
* |'debug'|
* |'eventignore'|
* |'ignorecase'|
* |'magic'|
* |'maxfuncdepth'|
* |'runtimepath'|
* |'verbose'|

--------------------------------------------------------------------------
Exercise Set 2: VimL-specific Options

1.0 What is the difference between these two commands?

  :set ignorecase?
  :set ignorecase

1.1 Show two ways to display the current value of an option.
    (hint: one uses :set and the other uses :echo)

1.2 How do you switch off a boolean option?

1.3 How do you toggle a boolean option?

1.4 What does this command do?

  :set magic&vim

1.5 How do you append values to string options?

1.6 How do you prepend values to string options?

1.7 How do you find out which script last set an option?

1.8 How do you include whitespace and backslashes in option values?

1.9 What are local options? How do they differ to global options?
    What is the command to set local options?

1.10 How do you set the global value for a local option without altering
     the local value?

1.11 What is the difference between:

  :set ft=lisp
  :setf lisp

1.12 What are the two commands which open the interactive options browser?

3.0 When Vim is executing VimL in certain deeply nested situations, errors
    are often blindly ignored leaving the developer perplexed as to the
    source of problems. Name one way the developer can force Vim to show
    errors.

4.0 What are some reasons you could think of for the |'eventignore'| option?

5.0 Apart from setting |'ignorecase'|, what is another way the VimL
    developer can ensure case-sensitive matches?

6.0 Should you ever change the value of the |'magic'| option?
    What should you do to a developer who does?

7.0 Why does VimL have the |'maxfuncdepth'| option? What is the default
    depth? When would you increase this value?

8.0 What effect would altering the |'runtimepath'| have in the ~/.vimrc
    file? What type of plugin would rely heavily on this feature?

9.0 What does   :set verbose=12   do? When would you need to do that?

9.1 How can you solve the problem of information overload with the
    verbose option?
--------------------------------------------------------------------------

VimL has native support for inline regular expressions, similar to Perl. This
makes VimL especially useful for manipulating text, a very common task for Vim
scripts, naturally. Vim's flavour of regular expressions is not like Perl /
PCRE, but it is nearly as powerful. In some cases, Vim provides even more
expressiveness than Perl regexes. You can read about the differences in
|perl-patterns|.

Read all of |pattern.txt|

--------------------------------------------------------------------------
Exercise Set 3: Install and complete https://github.com/dahu/VimRegexTutor
--------------------------------------------------------------------------

Everything in |eval.txt| is new to Vim and constitutes the Expression Language
portion of VimL - the stuff that people expect when they think of a
programming language: variables, conditionals, loops, functions, data types,
etc. Finally we're getting a look at the real language behind VimL.

Read from |variables| through to |sticky-type-checking| in |eval.txt|

--------------------------------------------------------------------------
Exercise Set 4: Variables

1.0 How many types of variables does VimL support?

1.1 Read |type()|. What is a better way to say:

  if type(somevar) == 2

1.2 How does VimL represent hexadecimal and octal numbers?

1.3 This is broken, fix it:

  if "foo"
    echo "you should see this"
  endif
--------------------------------------------------------------------------

Read |char2nr()| , |nr2char()|, |str2nr()| , |str2float()| , and |printf()|
for explicit ways to convert between Numbers and Strings in VimL.

--------------------------------------------------------------------------
Exercise Set 5: Explicit Number Type Conversions

1.0 What could you imagine using |char2nr()| and |nr2char()| for?

2.0 We can use   echo "0x100" + 0   to convert the string to a number. How
    would you convert hexadecimal 100 to decimal without this string trick?

3.0 How would you convert 100 decimal to hexadecimal?

--------------------------------------------------------------------------

Read |NL-used-for-Nul| and |CR-used-for-NL| in |pattern.txt|

--------------------------------------------------------------------------
Exercise Set 6: Vim's Dirty <NL>, <CR> and <Nul> Relationship

1.0 Don't you wish you hadn't read that?
--------------------------------------------------------------------------

Read sections |41.1| - |41.2| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 7: Expressions

1.0 Vim's command-line mode is initiated with the ':' key. Is it legal to
    start script commands in a vim file with a ':'?

1.1 If you visually highlight and yank a bunch of VimL lines from a buffer,
    how can you subsequently execute them?
    Hint: This is very useful for adhoc debugging and testing of stuff you
    find in the manuals.

2.0 What's the difference between |:set| and |:let| ?

3.0 How do you stop a long-running loop in Vim?

4.0 VimL doesn't support the ++ operator like C/C++ does. What does VimL
    provide as a shortcut instead of:

  :let i = i + 1

5.0 What does prepending s: to a variable do in VimL, like:

  :let s:count = 0

6.0 Why doesn't this for-loop work? Fix it without just reordering the list
    elements.

  for x in [1, 2.0, "3"]
    echo x
  endfor

  Hint: the variable, x, can't change (between certain) types

7.0 Why is this code not what the developer intended? Fix it.

  if !exists(extension)
    let extension = '.vim'
  endif

8.0 What is the difference between 'single-quoted' and "double-quoted"
    strings? Which type should you use?
--------------------------------------------------------------------------

Read |internal-variables| in |eval.txt| and the subsequent entries on each
internal variable type.

--------------------------------------------------------------------------
Exercise Set 9: Internal Variables
--------------------------------------------------------------------------

Read |expression-syntax| in |eval.txt| and sections |41.3| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 8: Expressions
--------------------------------------------------------------------------

Read |expression-commands| in |eval.txt| and section |41.4| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 10: Expression Commands (VimL Statements)

x.0 How do you use |:let| to change an option in Vim?
--------------------------------------------------------------------------

Read section |41.5| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 11: Executing Expressions
--------------------------------------------------------------------------

Read |user-functions| in |eval.txt| and section |41.7| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 12: Defining, Listing, Debugging and Deleting Functions
--------------------------------------------------------------------------

Most modern scripting languages (from Awk onwards, if memory serves) offer
arrays and associative arrays (also called hashes, maps or dictionaries)
because many programming needs are adequately met with just these two data
structures. VimL has these two data structures too, referring to them as Lists
and Dictionaries respectively: Lists are integer indexed arrays, and
Dictionaries are string indexed associative arrays.

Read section |41.8| in |usr_41.txt| , but for now, skip over the Object
Oriented part. This topic is covered later in |learnviml-OOP| .

--------------------------------------------------------------------------
Exercise Set 13: Lists and Dictionaries
--------------------------------------------------------------------------

Read |eval-examples| in |eval.txt|

--------------------------------------------------------------------------
Exercise Set 14: Intermediate Challenges
	*Todo	Using the |eval-examples| as inspiration, pose a set of
	suitable challenges that exercise the expression language. If builtin
	functions are required in the solutions, list them in a hints section.
--------------------------------------------------------------------------

##############################################################################
BUILTIN FUNCTIONS                            *learnviml-Builtin-Functions*

Browse through the |function-list|, Vim's built-in VimL library containing
more than 250 functions for working with strings, numbers, lists,
dictionaries, buffers, windows, tabs, the arg-list, system commands, file
operations, and many more of the Vim internals. The following exercises are
designed to expose you to many of the useful functions in this library. You
don't have to do all of these exercises now; you could instead use this
section as a type of reference manual practice-ground - a great place to spend
some quality Deliberate Practice on a quiet Friday night. In that vein, keep
in mind LearnVimL's built-in |:LVL| function for searching the code samples.

--------------------------------------------------------------------------
Exercise Set 15: Builtin String Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 16: Builtin Float Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 17: Builtin List Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 18: Builtin Dictionary Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 19: Builtin Bitwise Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 20: Builtin Var Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 21: Builtin Cursor and Mark Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 22: Builtin Buffer Text Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 23: Builtin System and File Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 24: Builtin Date and Time Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 25: Builtin Buffer, Window, Tab and Arg Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 26: Builtin Command-line Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 27: Builtin Quickfix Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 28: Builtin Completion Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 29: Builtin Folding Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 30: Builtin Syntax and Highlighting Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 31: Builtin Spelling Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 32: Builtin History Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 33: Builtin Interactive Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 34: Builtin GUI Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 35: Builtin Server Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 36: Builtin Window Size Functions
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Exercise Set 37: Miscellaneous Builtin Functions
--------------------------------------------------------------------------

All good editors allow its users to override keyboard behaviour. Vim's maps
provide key bindings for all of the different modes including operator pending
mode which lets the Vim developer create custom motions, one of Vim's killer
features.

Read |map.txt|
Read |map.txt|
Read |'timeout'| option
Read |'maxmapdepth'| option
Read |usr_40.txt|

--------------------------------------------------------------------------
Exercise Set 38: Key Maps
--------------------------------------------------------------------------

Vim has a rich event system which is programmed through the autocommand
interface. There are around eighty different events in various categories,
like Reading & Writing files; manipulating Buffers, Windows and Tabs; changing
Options; starting and closing Vim; Shell interaction; and tracking cursor
movement and Insert Mode switching.

Read |autocmd.txt|
Read |filetype.txt|

--------------------------------------------------------------------------
Exercise Set 39: Autocommands and Filetypes
--------------------------------------------------------------------------

|:normal| is a very handy Ex command for issuing normal-mode commands from
within a script as if they were typed. This is commonly used in user maps and
functions that manipulate the buffer using Vim's native command mode.

Read |various.txt|

--------------------------------------------------------------------------
Exercise Set 40: Redraw, Normal, and External Commands
--------------------------------------------------------------------------

One of Vim's killer features is Motions, the ability to manipulate entire
textual clusters as single objects, moving between them, moving them, yanking
and putting them, and visually selecting them for even more complicated
operations. Happily, the Vim developer is also granted the power to create
their own motions to provide these powerful editing benefits to their own
users.

In regard to |:normal|, read |motion.txt|

--------------------------------------------------------------------------
Exercise Set 41: Motions
--------------------------------------------------------------------------

##############################################################################
EXCEPTIONS                                          *learnviml-Exceptions*

Vim has a try/catch exception model that simplifies the handling of unexpected
failures.

Read |41.9| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 42: Exceptions
--------------------------------------------------------------------------

##############################################################################
PLUGINS                                                *learnviml-Plugins*

The rite of passage for any Vim developer is to create their own Plugin. Vim
has hundreds of plugins providing incredibly diverse features and
functionality never dreamed of by the original authors, Bill & Bram. In this
section you will learn about the standard components of normal Vim plugins,
but you will also install a helper plugin called Area41 which provides
templates to save you the hassle of putting all the standard work into the
creation of new plugins. This will let you create compliant plugins quickly,
allowing you to focus on the important part - your code.

Read |41.11| in |usr_41.txt|

Install the Area41 plugin.

--------------------------------------------------------------------------
Exercise Set 43: Writing Normal Plugins
--------------------------------------------------------------------------

Every programming language you edit in Vim has a corresponding filetype plugin
in the background which silently reconfigures the various Vim indentation,
syntax, colouring and compilation options whenever you start editing a file of
that type. Here you're going to learn how to write a filetype plugin of your
own.

Read |41.12| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 44: Writing Filetype Plugins
--------------------------------------------------------------------------

Big plugins benefit from being broken down into modular pieces. Resource
hungry but seldom run plugins benefit from a load-on-demand launcher. Both of
these techniques are provided by the same "autoload" Library architecture in
Vim.

Read |41.15| in |usr_41.txt|

--------------------------------------------------------------------------
Exercise Set 45: Writing Library Scripts (autoload)
--------------------------------------------------------------------------

##############################################################################
OBJECT ORIENTED VIML                                       *learnviml-OOP*

VimL uses a prototypal form of Object Oriented design, more similar to
Javascript than class based systems like C++, Java, Python and Ruby.

VimLPOO Outline
---------------
[see ./scraps/vimlpoo.vim]
* intro - prototypal, not class based
* reference NERDTree and VimPEG as examples of VimLPOO in the wild
* show simple factory method of object creation
** show inheritance and polymorphism (http://of-vim-and-vigor.blogspot.com/2013/08/not-classy-vimlpoo.html)
* show alternate way of object creation (a la NEERDTree)

	*Todo	Show the two common architectures for VimLPOO
	*Todo	Show inheritance

##############################################################################
FUNCTIONAL(-ISH) VIML                         *learnviml-Functional(-ish)*

While VimL is strictly not a functional language, it does offer a few
functional-ish functions that operate on its Lists and Dictionaries which
provide clean and elegant alternatives to procedural solutions.

Functional(-ish) VimL Outline
-----------------------------
* show newviml ideas (http://of-vim-and-vigor.blogspot.com/search?q=newviml)
* show anonymous functions (http://of-vim-and-vigor.blogspot.com/2014/01/anonymous-functions-in-viml.html)

Anonymous Functions~

VimL does not natively offer anonymous functions but they can be simulated
with the following helper functions:

	*Todo	Insert the Fn() and Fx() helper functions.

##############################################################################
CHALLENGES                                          *learnviml-Challenges*

You now know most of the various pieces that constitute the VimL landscape.
Well, you've -seen- them anyway. To know them, you're going to have to -use-
them. What follows here is an increasingly involved set of challenges aimed at
giving you that practice. Do them all or do the ones that catch your fancy.
Design for yourself other challenges that require you to flex your newfound
VimL muscles.

	*Todo	these tasks have not been ordered by difficulty yet, and many more need to be added.

. Write an autocommand that removes trailing whitespace from all lines in the
  buffer when the user exits insert mode.

. VimL lacks a random number generator. Write one without shelling out to the
  OS.

. Write a syntax plugin for a filetype you use that is missing from Vim, or
  improve an existing filetype that has bugs, limitations or omissions.

. Write a plugin that receives commands from one window but performs them in
  another. Particular commands to support include: * and <c-]>

. Vim's native tab-page interface is a bit clunky. Write a plugin that makes
  tabs work the way you know they should.

 vim:noet:sw=8:nosmarttab:sts=0:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:fdm=marker:ft=help:norl:noro:modifiable:
